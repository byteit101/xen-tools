#!/bin/sh
#
#  This script is responsible for setting up /etc/fstab upon the
# new instance.
#
#  This should be a simple job, but it is complicated by some of the
# differences between filesystems - some root filesystems will require
# the installation of new packages, and we have to handle that here.
#
# Steve
# --
# https://steve.fi/


prefix=$1

#
#  Source our common functions
#
if [ -e /usr/share/xen-tools/common.sh ]; then
    . /usr/share/xen-tools/common.sh
else
    . ./hooks/common.sh
fi


#
# Log our start
#
logMessage Script $0 starting

logMessage Filesystem options are ${options}


#
#  Now we have the options we can create the fstab.
#
has_xfs=0
has_reiserfs=0
has_btrfs=0
cat <<E_O_FSTAB > ${prefix}/etc/fstab
# /etc/fstab: static file system information.
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    defaults        0       0
devpts          /dev/pts        devpts  rw,noexec,nosuid,gid=5,mode=620 0  0
E_O_FSTAB
for part in `seq 1 ${NUMPARTITIONS}`; do
    eval "PARTITION=\"\${PARTITION${part}}\""
    OLDIFS="${IFS}"
    IFS=:
    x=0
    for partdata in ${PARTITION}; do
        eval "partdata${x}=\"${partdata}\""
        x=$(( $x+1 ))
    done
    IFS="${OLDIFS}"

    case "${partdata2}" in
        xfs)
            has_xfs=1
            ;;
        reiserfs)
            has_reiserfs=1
            ;;
        btrfs)
            has_btrfs=1
            ;;
    esac

    if [ "${partdata2}" = "swap" ]; then
        echo "UUID=$(blkid "$partdata6" -o value -s UUID) none swap sw 0 0" >> ${prefix}/etc/fstab
    else
        if [ "${partdata2}" = "esp" ]; then
            partdata2=vfat
        fi
        # ESP partitions are nested, so use the chrrot to pull out the UUID from the disk or partition
        mount -o bind /proc ${prefix}/proc
        mount -o bind /dev ${prefix}/dev
        mount -o bind /dev/pts ${prefix}/dev/pts
        mount -o bind /sys ${prefix}/sys
        device="$(chroot ${prefix} findmnt -n -o SOURCE -M ${partdata3})"
        uuid="$(chroot ${prefix} blkid "$device" -o value -s UUID)"
        umount ${prefix}/sys
        umount ${prefix}/dev/pts
        umount ${prefix}/dev
        umount ${prefix}/proc
        if [ "x${uuid}" = "x" ]; then
            logMessage "Could not find UUID for partition"
            exit 1
        fi
        echo "UUID=${uuid} ${partdata3} ${partdata2} ${partdata4} 0 1" >> ${prefix}/etc/fstab
    fi
done

echo "Generated /etc/fstab:"
cat ${prefix}/etc/fstab
echo ""


logMessage Checking for filesystem tools to install

#
#  Install any required packages for the given root filesystem
#
if [ "$has_xfs" -eq 1 ]; then
    installPackage ${prefix} xfsprogs
fi
if [ "$has_reiserfs" -eq 1 ]; then
    if isAPT; then
        installDebianPackage reiserfsprogs
    elif isYum; then
        installRPMPackage reiserfs-utils
    else
        logMessage "Unable to install reiserfs tools; no package manager recognized"
    fi
fi
if [ "$has_btrfs" -eq 1 ]; then
    if isAPT; then
        installDebianPackage btrfs-tools
    elif isYum; then
        installRPMPackage btrfs-progs
    else
        logMessage "Unable to install btrfs tools; no package manager recognized"
    fi
fi


#
#  Log our finish
#
logMessage Script $0 finished
